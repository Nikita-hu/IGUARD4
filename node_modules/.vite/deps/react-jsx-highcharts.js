import {
  require_jsx_runtime
} from "./chunk-VIJJHCPD.js";
import {
  require_react
} from "./chunk-MOJUAYT3.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/react-jsx-highcharts/dist/es/components/WithSeriesType/index.js
var React2 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/Series/Series.js
var React = __toESM(require_react());
var import_react11 = __toESM(require_react());

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, v >>> 16 & 255, v >>> 8 & 255, v & 255, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255, v / 4294967296 & 255, v >>> 24 & 255, v >>> 16 & 255, v >>> 8 & 255, v & 255);
}
var parse_default = parse;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    if (typeof crypto === "undefined" || !crypto.getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    getRandomValues = crypto.getRandomValues.bind(crypto);
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  const words = uint8ToUint32(bytes);
  const md5Bytes = wordsToMd5(words, bytes.length * 8);
  return uint32ToUint8(md5Bytes);
}
function uint32ToUint8(input) {
  const bytes = new Uint8Array(input.length * 4);
  for (let i = 0; i < input.length * 4; i++) {
    bytes[i] = input[i >> 2] >>> i % 4 * 8 & 255;
  }
  return bytes;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  const xpad = new Uint32Array(getOutputLength(len)).fill(0);
  xpad.set(x);
  xpad[len >> 5] |= 128 << len % 32;
  xpad[xpad.length - 1] = len;
  x = xpad;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;
  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return Uint32Array.of(a, b, c, d);
}
function uint8ToUint32(input) {
  if (input.length === 0) {
    return new Uint32Array();
  }
  const output = new Uint32Array(getOutputLength(input.length * 8)).fill(0);
  for (let i = 0; i < input.length; i++) {
    output[i >> 2] |= (input[i] & 255) << i % 4 * 8;
  }
  return output;
}
function safeAdd(x, y) {
  const lsw = (x & 65535) + (y & 65535);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default = md5;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = new Uint8Array(str.length);
  for (let i = 0; i < str.length; ++i) {
    bytes[i] = str.charCodeAt(i);
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(version, hash, value, namespace, buf, offset) {
  const valueBytes = typeof value === "string" ? stringToBytes(value) : value;
  const namespaceBytes = typeof namespace === "string" ? parse_default(namespace) : namespace;
  if (typeof namespace === "string") {
    namespace = parse_default(namespace);
  }
  if ((namespace == null ? void 0 : namespace.length) !== 16) {
    throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
  }
  let bytes = new Uint8Array(16 + valueBytes.length);
  bytes.set(namespaceBytes);
  bytes.set(valueBytes, namespaceBytes.length);
  bytes = hash(bytes);
  bytes[6] = bytes[6] & 15 | version;
  bytes[8] = bytes[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = bytes[i];
    }
    return buf;
  }
  return unsafeStringify(bytes);
}

// node_modules/uuid/dist/esm-browser/v3.js
function v3(value, namespace, buf, offset) {
  return v35(48, md5_default, value, namespace, buf, offset);
}
v3.DNS = DNS;
v3.URL = URL;

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = { randomUUID };

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  var _a;
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random ?? ((_a = options.rng) == null ? void 0 : _a.call(options)) ?? rng();
  if (rnds.length < 16) {
    throw new Error("Random bytes length must be >= 16");
  }
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    if (offset < 0 || offset + 16 > buf.length) {
      throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
    }
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  const K = [1518500249, 1859775393, 2400959708, 3395469782];
  const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  const newBytes = new Uint8Array(bytes.length + 1);
  newBytes.set(bytes);
  newBytes[bytes.length] = 128;
  bytes = newBytes;
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);
  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);
    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }
    M[i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }
    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }
    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];
    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return Uint8Array.of(H[0] >> 24, H[0] >> 16, H[0] >> 8, H[0], H[1] >> 24, H[1] >> 16, H[1] >> 8, H[1], H[2] >> 24, H[2] >> 16, H[2] >> 8, H[2], H[3] >> 24, H[3] >> 16, H[3] >> 8, H[3], H[4] >> 24, H[4] >> 16, H[4] >> 8, H[4]);
}
var sha1_default = sha1;

// node_modules/uuid/dist/esm-browser/v5.js
function v5(value, namespace, buf, offset) {
  return v35(80, sha1_default, value, namespace, buf, offset);
}
v5.DNS = DNS;
v5.URL = URL;

// node_modules/react-jsx-highcharts/dist/es/components/SeriesContext/index.js
var import_react = __toESM(require_react());
var SeriesContext = (0, import_react.createContext)();
SeriesContext.displayName = "SeriesContext";
var SeriesContext_default = SeriesContext;

// node_modules/react-jsx-highcharts/dist/es/utils/pickBy.js
function pickBy_default(obj, filterFn) {
  let retProps = {};
  if (obj) {
    Object.keys(obj).filter((key) => filterFn(key, obj[key])).forEach((key) => {
      retProps[key] = obj[key];
    });
  }
  return retProps;
}

// node_modules/react-jsx-highcharts/dist/es/utils/events.js
var getEventHandlerProps = (props) => {
  return pickBy_default(props, _isEventKey);
};
var getNonEventHandlerProps = (props) => {
  return pickBy_default(props, (key, value) => !_isEventKey(key, value));
};
var getEventsConfig = (props) => {
  const eventProps = getEventHandlerProps(props);
  const eventsConfig = {};
  Object.keys(eventProps).forEach((eventName) => {
    const configName = eventName.slice(2)[0].toLowerCase() + eventName.slice(3);
    eventsConfig[configName] = eventProps[eventName];
  });
  return eventsConfig;
};
var _isEventKey = (key, value) => key.indexOf("on") === 0 && key.length > 2 && typeof value === "function";

// node_modules/react-jsx-highcharts/dist/es/utils/getModifiedProps.js
function getModifiedProps(prevProps, currProps, childrenIsText = false) {
  let {
    children,
    ...rest
  } = currProps;
  const modifiedProps = pickBy_default(rest, (propName, value) => {
    if (!prevProps) return true;
    return Object.is(value, prevProps[propName]) === false;
  });
  if (childrenIsText && (!prevProps || Object.is(prevProps.children, children) === false)) {
    modifiedProps.text = children;
  }
  if (Object.keys(modifiedProps).length > 0) {
    return modifiedProps;
  }
  return false;
}

// node_modules/react-jsx-highcharts/dist/es/utils/warnings.js
var titleCSS = "color:red; font-size:20px; font-weight: bold;";
var descCSS = (color) => `font-size: 16px; color:${color};`;
var descDefaultCSS = descCSS("#000");
var descDefaultItalicCSS = descCSS("#000") + "font-style:italic;";
var descKeywordCSS = descCSS("#008") + "font-weight:600;";
var descStringCSS = descCSS("#080");
var descCommentCSS = descCSS("#808080") + "font-style:italic;";
var descNewLine = "font-size: 1px; margin-right: 100%;";
var moduleToImportPath = {
  annotations: "modules/annotations",
  more: "highcharts-more",
  threeD: "highcharts-3d",
  bullet: "modules/bullet",
  cylinder: "modules/cylinder",
  dependencyWheel: "modules/dependency-wheel",
  funnel: "modules/funnel",
  funnel3d: "modules/funnel3d",
  histogram: "modules/histogram-bellcurve",
  item: "modules/item-series",
  networkgraph: "modules/networkgraph",
  organization: "modules/organization",
  pareto: "modules/pareto",
  pyramid3d: "modules/pyramid3d",
  sankey: "modules/sankey",
  solidgauge: "modules/solid-gauge",
  streamgraph: "modules/streamgraph",
  sunburst: "modules/sunburst",
  tilemap: "modules/tilemap",
  timeline: "modules/timeline",
  treemap: "modules/treemap",
  variablepie: "modules/variable-pie",
  variwide: "modules/variwide",
  vector: "modules/vector",
  venn: "modules/venn",
  windbarb: "modules/windbarb",
  xrange: "modules/xrange"
};
var moduleToVarName = {
  annotations: "addAnnotations",
  more: "addHighchartsMore",
  threeD: "addHighcharts3DModule",
  bullet: "addBulletModule",
  cylinder: "addCylinderModule",
  dependencyWheel: "addDependencyWheelModule",
  funnel: "addFunnelModule",
  funnel3d: "addFunnel3dModule",
  histogram: "addHistogramBellCurveModule",
  item: "addItemModule",
  networkgraph: "addNetworkGraphModule",
  organization: "addOrganizationModule",
  pareto: "addParetoModule",
  pyramid3d: "addPyramid3dModule",
  sankey: "addSankeyModule",
  solidgauge: "addSolidGaugeModule",
  streamgraph: "addStreamGraphModule",
  sunburst: "addSunburstModule",
  tilemap: "addTilemapModule",
  timeline: "addTimelineModule",
  treemap: "addTreemapModule",
  variablepie: "addVariablePieModule",
  variwide: "addVariwideModule",
  vector: "addVectorModule",
  venn: "addVennModule",
  windbarb: "addWindBarbModule",
  xrange: "addXRangeModule"
};
var moduleToFeatureMap = {
  annotations: ["annotations"],
  more: ["arearange", "areasplinerange", "boxplot", "bubble", "columnrange", "columnpyramid", "errorbar", "gauge", "packedbubble", "polygon", "waterfall"],
  threeD: ["scatter3d", "cylinder", "funnel3d", "pyramid3d"],
  bullet: ["bullet"],
  funnel: ["funnel", "pyramid"],
  histogram: ["histogram", "bellcurve"],
  item: ["item"],
  networkgraph: ["networkgraph"],
  pareto: ["pareto"],
  sankey: ["sankey", "organization", "dependencywheel"],
  solidgauge: ["solidgauge"],
  streamgraph: ["streamgraph"],
  sunburst: ["sunburst"],
  tilemap: ["tilemap"],
  timeline: ["timeline"],
  treemap: ["treemap"],
  variablepie: ["variablepie"],
  variwide: ["variwide"],
  vector: ["vector"],
  venn: ["venn"],
  windbarb: ["windbarb"],
  xrange: ["xrange"],
  // Not alphabetically for module ordering reasons
  dependencyWheel: ["dependencywheel"],
  cylinder: ["cylinder", "funnel3d", "pyramid3d"],
  funnel3d: ["funnel3d", "pyramid3d"],
  organization: ["organization"],
  pyramid3d: ["pyramid3d"]
};
var findModules = (feature) => {
  const modules = Object.keys(moduleToFeatureMap).filter((key) => {
    return moduleToFeatureMap[key].indexOf(feature) > -1;
  });
  if (modules.length === 0) return void 0;
  return modules;
};
var generateLines = (modules) => {
  const importLines = modules.map((module) => `%c %cimport %c${moduleToVarName[module]} %cfrom %c'highcharts/${moduleToImportPath[module]}'%c;`);
  const applyLines = modules.map((module) => `%c %c${moduleToVarName[module]}%c(Highcharts);`);
  const importStyling = modules.map(() => [descNewLine, descKeywordCSS, descDefaultCSS, descKeywordCSS, descStringCSS, descDefaultCSS]);
  const applyStyling = modules.map(() => [descNewLine, descDefaultItalicCSS, descDefaultCSS]);
  return {
    importLines,
    applyLines,
    importStyling,
    applyStyling
  };
};
var logDetailedErrorMessage = (warning, modules) => {
  const {
    importLines,
    applyLines,
    importStyling,
    applyStyling
  } = generateLines(modules);
  const isMultiModule = modules.length > 1;
  console.group("React JSX Highcharts error");
  console.log(`%c${warning}`, titleCSS);
  console.log("More information: https://github.com/whawker/react-jsx-highcharts/wiki/Highcharts-error-%2317");
  console.log.apply(console, [].concat(`You likely need to import the additional module${isMultiModule ? "s" : ""}, try adding
    %c
    %c %cimport %cHighcharts %cfrom %c'highcharts'%c;
    ${importLines.join("\n")}
    %c
    %c %c// For highcharts below version 12:
    %c %c// After imports, but before component - apply additional functionality from module${isMultiModule ? "s" : ""} to Highcharts
    ${applyLines.join("\n")}`.replace(/^ +/gm, ""), descNewLine, descNewLine, descKeywordCSS, descDefaultCSS, descKeywordCSS, descStringCSS, descDefaultCSS, ...importStyling, descNewLine, descNewLine, descCommentCSS, ...applyStyling));
  console.groupEnd();
};
var logSeriesErrorMessage = (seriesType) => {
  if (true) {
    const warning = `This series type "${seriesType}" requires an additional Highcharts module`;
    const modules = findModules(seriesType);
    if (!modules) {
      console.warn(`${warning}, or is invalid.`);
      return;
    }
    logDetailedErrorMessage(warning, modules);
  }
};
var logModuleErrorMessage = (componentName, moduleName) => {
  if (true) {
    const warning = `This component "${componentName}" requires an additional Highcharts module`;
    const modules = findModules(moduleName);
    if (!modules) {
      console.warn(`${warning}, or is invalid.`);
      return;
    }
    logDetailedErrorMessage(warning, modules);
  }
};
var log3DModuleErrorMessage = () => {
  if (true) {
    logDetailedErrorMessage('3D features such as "ZAxis" require an additional Highcharts module', ["threeD"]);
  }
};

// node_modules/react-jsx-highcharts/dist/es/components/UsePrevious/index.js
var import_react2 = __toESM(require_react());
function usePrevious(value) {
  const ref = (0, import_react2.useRef)();
  (0, import_react2.useEffect)(() => {
    ref.current = value;
  });
  return ref.current;
}

// node_modules/react-jsx-highcharts/dist/es/components/UseHighcharts/index.js
var import_react4 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/HighchartsContext/index.js
var import_react3 = __toESM(require_react());
var HighchartsContext = (0, import_react3.createContext)();
HighchartsContext.displayName = "HighchartsContext";
var HighchartsContext_default = HighchartsContext;

// node_modules/react-jsx-highcharts/dist/es/components/UseHighcharts/index.js
function useHighcharts() {
  return (0, import_react4.useContext)(HighchartsContext_default);
}

// node_modules/react-jsx-highcharts/dist/es/components/UseChart/index.js
var import_react6 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/ChartContext/index.js
var import_react5 = __toESM(require_react());
var ChartContext = (0, import_react5.createContext)();
ChartContext.displayName = "ChartContext";
var ChartContext_default = ChartContext;

// node_modules/react-jsx-highcharts/dist/es/components/UseChart/index.js
function useChart() {
  return (0, import_react6.useContext)(ChartContext_default);
}

// node_modules/react-jsx-highcharts/dist/es/components/UseAxis/index.js
var import_react8 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/AxisContext/index.js
var import_react7 = __toESM(require_react());
var AxisContext = (0, import_react7.createContext)();
AxisContext.displayName = "AxisContext";
var AxisContext_default = AxisContext;

// node_modules/react-jsx-highcharts/dist/es/components/Axis/createProvidedAxis.js
var createProvidedAxis = (axis) => {
  if (!axis) return null;
  return {
    object: axis,
    id: axis.userOptions && axis.userOptions.id,
    type: axis.coll,
    update: axis.update.bind(axis),
    remove: axis.remove.bind(axis),
    addPlotBandOrLine: axis.addPlotBandOrLine.bind(axis),
    removePlotBandOrLine: axis.removePlotBandOrLine.bind(axis),
    getExtremes: axis.getExtremes.bind(axis),
    setExtremes: axis.setExtremes.bind(axis),
    setTitle: axis.setTitle.bind(axis)
  };
};
var createProvidedAxis_default = createProvidedAxis;

// node_modules/react-jsx-highcharts/dist/es/components/UseAxis/index.js
function useAxis(axisId) {
  const chart = useChart();
  const contextAxis = (0, import_react8.useContext)(AxisContext_default);
  const createStateAxis = () => {
    if (contextAxis) return contextAxis;
    if (axisId) {
      const axis = chart.get(axisId);
      return createProvidedAxis_default(axis);
    }
    return null;
  };
  const [providedAxis, setProvidedAxis] = (0, import_react8.useState)(createStateAxis);
  (0, import_react8.useEffect)(() => {
    if (providedAxis) return;
    setProvidedAxis(createStateAxis());
  }, []);
  (0, import_react8.useDebugValue)(providedAxis ? providedAxis.id : null);
  return providedAxis;
}

// node_modules/react-jsx-highcharts/dist/es/components/UseColorAxis/index.js
var import_react10 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/ColorAxisContext/index.js
var import_react9 = __toESM(require_react());
var ColorAxisContext = (0, import_react9.createContext)();
ColorAxisContext.displayName = "ColorAxisContext";
var ColorAxisContext_default = ColorAxisContext;

// node_modules/react-jsx-highcharts/dist/es/components/ColorAxis/createProvidedColorAxis.js
var createProvidedColorAxis = (colorAxis) => {
  if (!colorAxis) return null;
  return {
    object: colorAxis,
    id: colorAxis.userOptions && colorAxis.userOptions.id
  };
};
var createProvidedColorAxis_default = createProvidedColorAxis;

// node_modules/react-jsx-highcharts/dist/es/components/UseColorAxis/index.js
function useColorAxis(colorAxisId) {
  const chart = useChart();
  const contextColorAxis = (0, import_react10.useContext)(ColorAxisContext_default);
  const createStateColorAxis = () => {
    if (contextColorAxis) return contextColorAxis;
    if (colorAxisId) {
      const colorAxis = chart.get(colorAxisId);
      return createProvidedColorAxis_default(colorAxis);
    }
    return null;
  };
  const [providedColorAxis, setProvidedColorAxis] = (0, import_react10.useState)(createStateColorAxis);
  (0, import_react10.useEffect)(() => {
    if (providedColorAxis) return;
    setProvidedColorAxis(createStateColorAxis());
  }, []);
  (0, import_react10.useDebugValue)(providedColorAxis ? providedColorAxis.id : null);
  return providedColorAxis;
}

// node_modules/react-jsx-highcharts/dist/es/components/Series/createProvidedSeries.js
function createProvidedSeries(series) {
  if (!series) return null;
  return {
    object: series,
    id: series.userOptions && series.userOptions.id,
    type: series.type,
    update: series.update.bind(series),
    remove: series.remove.bind(series),
    setData: series.setData.bind(series),
    setVisible: series.setVisible.bind(series)
  };
}

// node_modules/react-jsx-highcharts/dist/es/components/Series/Series.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var EMPTY_ARRAY = [];
var Series = (0, import_react11.memo)(({
  id = v4_default,
  data = EMPTY_ARRAY,
  isDataEqual = Object.is,
  type = "line",
  visible = true,
  children = null,
  axisId,
  requiresAxis = true,
  jsxOptions,
  ...restProps
}) => {
  const seriesProps = {
    id,
    data,
    type,
    visible,
    ...restProps
  };
  const Highcharts = useHighcharts();
  const {
    addSeries,
    needsRedraw
  } = useChart();
  if (true) {
    const seriesTypes = Object.keys(Highcharts.seriesTypes);
    if (seriesTypes.indexOf(type) === -1) logSeriesErrorMessage(type);
  }
  const seriesRef = (0, import_react11.useRef)(null);
  const [, setHasSeries] = (0, import_react11.useState)(false);
  const providerValueRef = (0, import_react11.useRef)(null);
  const axis = useAxis(axisId);
  const colorAxis = useColorAxis();
  (0, import_react11.useEffect)(() => {
    if (requiresAxis && !axis) return;
    const opts = getSeriesConfig(seriesProps, axis, colorAxis, requiresAxis);
    const series = addSeries(opts, false);
    seriesRef.current = series;
    providerValueRef.current = createProvidedSeries(seriesRef.current);
    setHasSeries(true);
    needsRedraw();
    return () => {
      if (series && series.remove) {
        try {
          series.remove.bind(series)(false);
          seriesRef.current = null;
        } catch {
        }
        needsRedraw();
      }
    };
  }, [axis]);
  const prevProps = usePrevious(seriesProps);
  (0, import_react11.useEffect)(() => {
    if (!prevProps) return;
    if (!seriesRef.current) return;
    const series = seriesRef.current;
    const {
      visible: visible2,
      data: data2,
      ...rest
    } = seriesProps;
    let doRedraw = false;
    if (isDataEqual(data2, prevProps.data) === false) {
      const animation = jsxOptions && jsxOptions.animation;
      const updatePoints = jsxOptions && jsxOptions.updatePoints;
      series.setData(data2, false, animation, updatePoints);
      doRedraw = true;
    }
    if (visible2 !== prevProps.visible) {
      series.setVisible(visible2, false);
      doRedraw = true;
    }
    const modifiedProps = getModifiedProps(prevProps, rest);
    if (modifiedProps !== false) {
      const nonEventProps = getNonEventHandlerProps(modifiedProps);
      series.update(nonEventProps, false);
      const modifiedEvents = getEventsConfig(modifiedProps);
      const prevEvents = getEventsConfig(prevProps);
      Object.keys(modifiedEvents).forEach((eventName) => {
        const oldHandler = prevEvents[eventName];
        if (oldHandler) {
          Highcharts.removeEvent(series, eventName, oldHandler);
        }
        const newHandler = modifiedEvents[eventName];
        if (newHandler) {
          Highcharts.addEvent(series, eventName, newHandler);
        }
      });
      doRedraw = true;
    }
    if (doRedraw) {
      needsRedraw();
    }
  });
  if (!seriesRef.current) return null;
  return (0, import_jsx_runtime.jsx)(SeriesContext_default.Provider, {
    value: providerValueRef.current,
    children
  });
});
var getSeriesConfig = (props, axis, colorAxis, requiresAxis) => {
  const {
    id,
    data,
    ...rest
  } = props;
  const seriesId = typeof id === "function" ? id() : id;
  const nonEventProps = getNonEventHandlerProps(rest);
  const events = getEventsConfig(rest);
  const config = {
    id: seriesId,
    data,
    events,
    ...nonEventProps
  };
  if (colorAxis) {
    config.colorAxis = colorAxis.id;
  }
  if (requiresAxis) {
    config[axis.type] = axis.id;
  }
  return config;
};
Series.displayName = "Series";
var Series_default = Series;

// node_modules/react-jsx-highcharts/dist/es/components/Series/index.js
var Series_default2 = Series_default;

// node_modules/react-jsx-highcharts/dist/es/components/WithSeriesType/index.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
function withSeriesType(seriesType, additionalProps = {}) {
  const SeriesComponent = (props) => (0, import_jsx_runtime2.jsx)(Series_default2, {
    ...props,
    ...additionalProps,
    type: seriesType.toLowerCase()
  });
  SeriesComponent.displayName = `${seriesType}Series`;
  return SeriesComponent;
}

// node_modules/react-jsx-highcharts/dist/es/components/WithHighcharts/index.js
var React3 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
function withHighcharts(Component, Highcharts) {
  return function HighchartsWrappedComponent(props) {
    return (0, import_jsx_runtime3.jsx)(HighchartsProvider, {
      Highcharts,
      children: (0, import_jsx_runtime3.jsx)(Component, {
        ...props
      })
    });
  };
}
var HighchartsProvider = ({
  Highcharts,
  children
}) => (0, import_jsx_runtime3.jsx)(HighchartsContext_default.Provider, {
  value: Highcharts,
  children
});

// node_modules/react-jsx-highcharts/dist/es/components/HighchartsChart/HighchartsChart.js
var React5 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/BaseChart/BaseChart.js
var React4 = __toESM(require_react());
var import_react12 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/utils/debounce-raf.js
function debounce_raf_default(fn) {
  const cancelAnimationFrame = window.cancelAnimationFrame;
  const requestAnimationFrame = window.requestAnimationFrame;
  var queued;
  return function(...args) {
    if (queued) cancelAnimationFrame(queued);
    queued = requestAnimationFrame(fn.bind(fn, ...args));
  };
}

// node_modules/react-jsx-highcharts/dist/es/components/BaseChart/createProvidedChart.js
var createProvidedChart = (chart, type) => ({
  object: chart,
  type,
  get: chart.get.bind(chart),
  setSize: chart.setSize.bind(chart),
  update: chart.update.bind(chart),
  addAxis: chart.addAxis.bind(chart),
  addColorAxis: chart.addColorAxis.bind(chart),
  addSeries: chart.addSeries.bind(chart),
  setTitle: chart.setTitle.bind(chart),
  setCaption: chart.setCaption.bind(chart),
  showLoading: chart.showLoading.bind(chart),
  hideLoading: chart.hideLoading.bind(chart),
  addCredits: chart.addCredits.bind(chart),
  addAnnotation: chart.addAnnotation ? chart.addAnnotation.bind(chart) : null,
  removeAnnotation: chart.removeAnnotation ? chart.removeAnnotation.bind(chart) : null,
  needsRedraw: debounce_raf_default(() => {
    if (!chart.__destroyed) {
      try {
        chart.redraw.bind(chart)();
      } catch {
      }
    }
  })
});
var createProvidedChart_default = createProvidedChart;

// node_modules/react-jsx-highcharts/dist/es/components/BaseChart/BaseChart.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var noop = (c) => c;
var BaseChart = ({
  children = null,
  callback = noop,
  className = "",
  containerProps = null,
  ...restProps
}) => {
  const [rendered, setRendered] = (0, import_react12.useState)(false);
  const domNodeRef = (0, import_react12.useRef)(null);
  const chartRef = (0, import_react12.useRef)(null);
  const providedChartRef = (0, import_react12.useRef)(null);
  (0, import_react12.useLayoutEffect)(() => {
    const myChart = initHighcharts(restProps, domNodeRef.current);
    chartRef.current = myChart;
    providedChartRef.current = createProvidedChart_default(myChart, restProps.chartType);
    callback(myChart);
    setRendered(true);
  }, []);
  (0, import_react12.useEffect)(() => {
    const myChart = chartRef.current;
    return () => {
      if (myChart) {
        myChart.destroy.bind(myChart)();
        myChart.__destroyed = true;
      }
    };
  }, []);
  const prevProps = usePrevious(restProps);
  (0, import_react12.useEffect)(() => {
    if (!rendered) return;
    const {
      plotOptions
    } = restProps;
    const myChart = chartRef.current;
    if (Object.is(prevProps.plotOptions, plotOptions) === false && myChart) {
      myChart.update({
        plotOptions
      }, false);
      providedChartRef.current.needsRedraw();
    }
  });
  return (0, import_jsx_runtime4.jsx)("div", {
    ...containerProps,
    className: `chart ${className}`,
    ref: domNodeRef,
    children: rendered && (0, import_jsx_runtime4.jsx)(ChartContext_default.Provider, {
      value: providedChartRef.current,
      children
    })
  });
};
var initHighcharts = (props, domNode) => {
  if (!domNode) {
    return;
  }
  const {
    chartCreationFunc,
    callback,
    chart,
    polar,
    gauge,
    styledMode = false,
    children,
    ...rest
  } = props;
  const opts = {
    chart: {
      styledMode,
      ...chart
    },
    title: {
      text: null
    },
    subtitle: {
      text: null
    },
    legend: {
      enabled: false
    },
    rangeSelector: {
      enabled: false
    },
    navigator: {
      enabled: false
    },
    scrollbar: {
      enabled: false
    },
    tooltip: {
      enabled: false
    },
    credits: {
      enabled: false
    },
    series: [],
    xAxis: [],
    yAxis: [],
    ...rest
  };
  const myChart = chartCreationFunc(domNode, opts);
  myChart.polar = polar;
  myChart.angular = gauge;
  return myChart;
};
var BaseChart_default = BaseChart;

// node_modules/react-jsx-highcharts/dist/es/components/BaseChart/index.js
var BaseChart_default2 = BaseChart_default;

// node_modules/react-jsx-highcharts/dist/es/components/HighchartsChart/HighchartsChart.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var HighchartsChart = (props) => {
  const Highcharts = useHighcharts();
  return (0, import_jsx_runtime5.jsx)(BaseChart_default2, {
    ...props,
    chartCreationFunc: Highcharts.chart,
    chartType: "chart"
  });
};
var HighchartsChart_default = HighchartsChart;

// node_modules/react-jsx-highcharts/dist/es/components/HighchartsChart/index.js
var HighchartsChart_default2 = HighchartsChart_default;

// node_modules/react-jsx-highcharts/dist/es/components/HighchartsSparkline/HighchartsSparkline.js
var React9 = __toESM(require_react());
var import_react17 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/Chart/Chart.js
var import_react14 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/UseModifiedProps/index.js
var import_react13 = __toESM(require_react());
function useModifiedProps(props, childrenIsText = false) {
  const ref = (0, import_react13.useRef)();
  (0, import_react13.useEffect)(() => {
    ref.current = props;
  });
  const modifiedProps = getModifiedProps(ref.current, props, childrenIsText);
  (0, import_react13.useDebugValue)(modifiedProps ? "Modified" : "Not modified");
  return modifiedProps;
}

// node_modules/react-jsx-highcharts/dist/es/components/UseManualEventHandlers/index.js
var useManualEventHandlers = function(props, target) {
  const Highcharts = useHighcharts();
  const eventHandlers = getEventsConfig(props);
  const previousEventHandlers = usePrevious(eventHandlers);
  const modifiedEvenHandlers = getModifiedProps(previousEventHandlers, eventHandlers);
  if (modifiedEvenHandlers !== false) {
    Object.keys(modifiedEvenHandlers).forEach((eventName) => {
      if (previousEventHandlers) {
        const oldHandler = previousEventHandlers[eventName];
        if (oldHandler) {
          Highcharts.removeEvent(target, eventName, oldHandler);
        }
      }
      const newHandler = modifiedEvenHandlers[eventName];
      if (newHandler) {
        Highcharts.addEvent(target, eventName, newHandler);
      }
    });
  }
};
var UseManualEventHandlers_default = useManualEventHandlers;

// node_modules/react-jsx-highcharts/dist/es/components/Chart/Chart.js
var Chart = (0, import_react14.memo)(({
  type = "line",
  width,
  height,
  ...restProps
}) => {
  const chart = useChart();
  const mounted = (0, import_react14.useRef)(false);
  const modifiedProps = useModifiedProps({
    type,
    ...restProps
  });
  (0, import_react14.useEffect)(() => {
    if (!(width === void 0 && height === void 0)) {
      chart.setSize(width, height);
    }
  }, [width, height]);
  (0, import_react14.useEffect)(() => {
    if (modifiedProps !== false && mounted.current) {
      const notEventProps = getNonEventHandlerProps(modifiedProps);
      if (Object.getOwnPropertyNames(notEventProps).length > 0) {
        updateChart(modifiedProps, chart, chart.needsRedraw);
      }
    }
  });
  (0, import_react14.useEffect)(() => {
    const notEventProps = getNonEventHandlerProps({
      type,
      ...restProps
    });
    updateChart(notEventProps, chart);
    mounted.current = true;
  }, []);
  UseManualEventHandlers_default(restProps, chart.object);
  return null;
});
var updateChart = (config, chart) => {
  chart.update({
    chart: config
  }, false);
  chart.needsRedraw();
};
Chart.displayName = "Chart";
var Chart_default = Chart;

// node_modules/react-jsx-highcharts/dist/es/components/Chart/index.js
var Chart_default2 = Chart_default;

// node_modules/react-jsx-highcharts/dist/es/components/XAxis/XAxis.js
var React7 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/Axis/Axis.js
var React6 = __toESM(require_react());
var import_react15 = __toESM(require_react());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var Axis = ({
  children = null,
  dynamicAxis = true,
  ...restProps
}) => {
  const chart = useChart();
  const axisRef = (0, import_react15.useRef)(null);
  const providedAxisRef = (0, import_react15.useRef)(null);
  const [hasAxis, setHasAxis] = (0, import_react15.useState)(false);
  (0, import_react15.useEffect)(() => {
    const axis = createAxis(chart, restProps, dynamicAxis);
    axisRef.current = axis;
    providedAxisRef.current = createProvidedAxis_default(axisRef.current);
    setHasAxis(true);
    chart.needsRedraw();
    return () => {
      if (axis.remove && dynamicAxis) {
        try {
          axis.remove.bind(axis)(false);
        } catch {
        }
        chart.needsRedraw();
      }
    };
  }, []);
  const modifiedProps = useModifiedProps(restProps);
  (0, import_react15.useEffect)(() => {
    if (!hasAxis) return;
    if (modifiedProps !== false) {
      const axis = axisRef.current;
      const nonEventProps = getNonEventHandlerProps(modifiedProps);
      const events = getEventsConfig(restProps);
      const updateProps = {
        events,
        ...nonEventProps
      };
      if (axis.plotLinesAndBands && axis.plotLinesAndBands.length > 0) {
        axis.update(updateProps, true);
      } else {
        axis.update(updateProps, false);
        chart.needsRedraw();
      }
    }
  });
  if (!hasAxis) return null;
  return (0, import_jsx_runtime6.jsx)(AxisContext_default.Provider, {
    value: providedAxisRef.current,
    children
  });
};
var getAxisConfig = (props) => {
  const {
    id = v4_default,
    ...rest
  } = props;
  const axisId = typeof id === "function" ? id() : id;
  const nonEventProps = getNonEventHandlerProps(rest);
  const events = getEventsConfig(rest);
  return {
    id: axisId,
    title: {
      text: null
    },
    events,
    ...nonEventProps
  };
};
var createAxis = (chart, props, dynamicAxis) => {
  const {
    id = v4_default,
    isX
  } = props;
  const opts = getAxisConfig(props);
  let axis;
  if (dynamicAxis) {
    axis = chart.addAxis(opts, isX, false);
  } else {
    const axisId = typeof id === "function" ? id() : id;
    axis = chart.get(axisId);
    axis.update.call(axis, opts, false);
  }
  return axis;
};
var Axis_default = Axis;

// node_modules/react-jsx-highcharts/dist/es/components/Axis/AxisTitle.js
var import_react16 = __toESM(require_react());
var AxisTitle = (0, import_react16.memo)(({
  children: text,
  axisId,
  ...restProps
}) => {
  const axis = useAxis(axisId);
  (0, import_react16.useEffect)(() => {
    if (axis) {
      updateAxisTitle({
        text,
        ...restProps
      }, axis);
    }
  });
  (0, import_react16.useEffect)(() => {
    return () => {
      if (axis) {
        try {
          updateAxisTitle({
            text: null
          }, axis);
        } catch {
        }
      }
    };
  }, [axis]);
  return null;
});
var updateAxisTitle = (config, axis) => {
  axis.setTitle(config, true);
};
AxisTitle.displayName = "AxisTitle";
var AxisTitle_default = AxisTitle;

// node_modules/react-jsx-highcharts/dist/es/components/Axis/index.js
var ChartAxis = Axis_default;
ChartAxis.Title = AxisTitle_default;
var Axis_default2 = ChartAxis;

// node_modules/react-jsx-highcharts/dist/es/components/XAxis/XAxis.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var XAxis = ({
  id,
  ...rest
}) => {
  const chart = useChart();
  const isStockChart = chart.type === "stockChart";
  const type = isStockChart ? "datetime" : "linear";
  const axisId = isStockChart ? "xAxis" : id;
  return (0, import_jsx_runtime7.jsx)(Axis_default2, {
    type,
    ...rest,
    id: axisId,
    isX: true
  });
};
var XAxis_default = XAxis;

// node_modules/react-jsx-highcharts/dist/es/components/XAxis/index.js
var ChartXAxis = XAxis_default;
ChartXAxis.Title = Axis_default2.Title;
var XAxis_default2 = ChartXAxis;

// node_modules/react-jsx-highcharts/dist/es/components/YAxis/YAxis.js
var React8 = __toESM(require_react());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var YAxis = ({
  type = "linear",
  ...restProps
}) => (0, import_jsx_runtime8.jsx)(Axis_default2, {
  type,
  ...restProps,
  isX: false
});
YAxis.displayName = "YAxis";
YAxis.Title = Axis_default2.Title;
var YAxis_default = YAxis;

// node_modules/react-jsx-highcharts/dist/es/components/YAxis/index.js
var YAxis_default2 = YAxis_default;

// node_modules/react-jsx-highcharts/dist/es/components/HighchartsSparkline/HighchartsSparkline.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var defaultSparklinePlotOptions = {
  series: {
    animation: false,
    lineWidth: 1,
    shadow: false,
    states: {
      hover: {
        lineWidth: 1
      }
    },
    marker: {
      radius: 1,
      states: {
        hover: {
          radius: 2
        }
      }
    },
    fillOpacity: 0.25
  }
};
var EMPTY_ARRAY2 = [];
var EMPTY_OBJECT = {};
var ZERO_ARRAY = [0];
var LABELS_DISABLED = {
  enabled: false
};
var DEFAULT_MARGIN = [2, 0, 2, 0];
var HighchartsSparkline = ({
  height = 20,
  width = 120,
  margin = DEFAULT_MARGIN,
  style = EMPTY_OBJECT,
  series,
  children,
  plotOptions = defaultSparklinePlotOptions,
  ...rest
}) => {
  const chartStyle = (0, import_react17.useMemo)(() => ({
    overflow: "visible",
    ...style
  }), [style]);
  const hasSeriesProp = !!series;
  const Series2 = hasSeriesProp ? series : children;
  return (0, import_jsx_runtime9.jsxs)(HighchartsChart_default2, {
    plotOptions,
    ...rest,
    children: [(0, import_jsx_runtime9.jsx)(Chart_default2, {
      height,
      width,
      animation: false,
      backgroundColor: null,
      borderWidth: 0,
      margin,
      style: chartStyle,
      skipClone: true
    }), (0, import_jsx_runtime9.jsx)(XAxis_default2, {
      labels: LABELS_DISABLED,
      startOnTick: false,
      endOnTick: false,
      tickPositions: EMPTY_ARRAY2
    }), (0, import_jsx_runtime9.jsx)(YAxis_default2, {
      id: "sparkline",
      labels: LABELS_DISABLED,
      startOnTick: false,
      endOnTick: false,
      tickPositions: ZERO_ARRAY,
      children: Series2
    }), hasSeriesProp && (0, import_jsx_runtime9.jsx)(import_jsx_runtime9.Fragment, {
      children
    })]
  });
};
var HighchartsSparkline_default = HighchartsSparkline;

// node_modules/react-jsx-highcharts/dist/es/components/HighchartsSparkline/index.js
var HighchartsSparkline_default2 = HighchartsSparkline_default;

// node_modules/react-jsx-highcharts/dist/es/components/Highcharts3dChart/Highcharts3dChart.js
var React10 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/Options3d/Options3d.js
var import_react18 = __toESM(require_react());
var DEFAULT_FRAME = {
  visible: "default",
  size: 1,
  bottom: {},
  top: {},
  left: {},
  right: {},
  back: {},
  front: {}
};
var Options3d = (0, import_react18.memo)(({
  enabled = false,
  alpha = 0,
  beta = 0,
  depth = 100,
  fitToPlot = true,
  viewDistance = 25,
  axisLabelPosition = "default",
  frame = DEFAULT_FRAME,
  ...restProps
}) => {
  const props = {
    enabled,
    alpha,
    beta,
    depth,
    fitToPlot,
    viewDistance,
    axisLabelPosition,
    frame,
    ...restProps
  };
  const Highcharts = useHighcharts();
  const chart = useChart();
  if (true) {
    if (!Highcharts.ZAxis) log3DModuleErrorMessage();
  }
  (0, import_react18.useEffect)(() => {
    update3dOptions(chart, props);
  });
  return null;
});
var update3dOptions = (chart, props) => {
  const {
    alpha,
    axisLabelPosition,
    beta,
    depth,
    fitToPlot,
    frame,
    viewDistance
  } = props;
  const opts = {
    chart: {
      options3d: {
        enabled: true,
        alpha,
        axisLabelPosition,
        beta,
        depth,
        fitToPlot,
        frame,
        viewDistance
      }
    }
  };
  chart.update(opts, true);
};
Options3d.displayName = "Options3d";
var Options3d_default = Options3d;

// node_modules/react-jsx-highcharts/dist/es/components/Options3d/index.js
var Options3d_default2 = Options3d_default;

// node_modules/react-jsx-highcharts/dist/es/components/Highcharts3dChart/Highcharts3dChart.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var CHART = {
  options3d: {
    enabled: true
  }
};
var ZAXIS = {
  id: "zAxis"
};
var Highcharts3dChart = ({
  children,
  alpha,
  axisLabelPosition,
  beta,
  depth,
  fitToPlot,
  frame,
  viewDistance,
  ...rest
}) => (0, import_jsx_runtime10.jsxs)(HighchartsChart_default2, {
  chart: CHART,
  zAxis: ZAXIS,
  ...rest,
  children: [(0, import_jsx_runtime10.jsx)(Options3d_default2, {
    alpha,
    axisLabelPosition,
    beta,
    depth,
    fitToPlot,
    frame,
    viewDistance
  }), children]
});
Highcharts3dChart.propTypes = Options3d_default2.propTypes;
var Highcharts3dChart_default = Highcharts3dChart;

// node_modules/react-jsx-highcharts/dist/es/components/Highcharts3dChart/index.js
var Highcharts3dChart_default2 = Highcharts3dChart_default;

// node_modules/react-jsx-highcharts/dist/es/components/Annotation/Annotation.js
var import_react19 = __toESM(require_react());
var Annotation = (0, import_react19.memo)((props) => {
  const {
    id = v4_default,
    children,
    ...rest
  } = props;
  const {
    addAnnotation,
    removeAnnotation
  } = useChart();
  if (true) {
    if (addAnnotation === null) {
      logModuleErrorMessage("<Annotation />", "annotations");
    }
  }
  const idRef = (0, import_react19.useRef)();
  (0, import_react19.useEffect)(() => {
    idRef.current = typeof id === "function" ? id() : id;
    const myId = idRef.current;
    const opts = {
      id: myId,
      ...rest
    };
    addAnnotation(opts);
    return () => {
      try {
        removeAnnotation(myId);
      } catch {
      }
    };
  });
  return null;
});
Annotation.displayName = "Annotation";
var Annotation_default = Annotation;

// node_modules/react-jsx-highcharts/dist/es/components/Annotation/index.js
var Annotation_default2 = Annotation_default;

// node_modules/react-jsx-highcharts/dist/es/components/Caption/Caption.js
var import_react21 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/UseChartUpdate/index.js
var import_react20 = __toESM(require_react());
var noop2 = (c) => c;
var useChartUpdate = (props, updateFn = noop2, destroyFn = noop2, childrenIsText = true) => {
  const chart = useChart();
  const modifiedProps = useModifiedProps(props, childrenIsText);
  (0, import_react20.useEffect)(() => {
    if (modifiedProps !== false) {
      updateFn(chart, modifiedProps);
      chart.needsRedraw();
    }
  });
  (0, import_react20.useEffect)(() => {
    return () => {
      try {
        destroyFn(chart);
      } catch {
      }
      chart.needsRedraw();
    };
  }, []);
};
var UseChartUpdate_default = useChartUpdate;

// node_modules/react-jsx-highcharts/dist/es/components/Caption/Caption.js
var Caption = (0, import_react21.memo)((props) => {
  UseChartUpdate_default(props, updateCaption, (chart) => updateCaption(chart, {
    text: null
  }));
  return null;
});
var updateCaption = (chart, config) => {
  chart.setCaption(config);
};
Caption.displayName = "Caption";
var Caption_default = Caption;

// node_modules/react-jsx-highcharts/dist/es/components/Caption/index.js
var Caption_default2 = Caption_default;

// node_modules/react-jsx-highcharts/dist/es/components/ColorAxis/ColorAxis.js
var React11 = __toESM(require_react());
var import_react22 = __toESM(require_react());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var ColorAxis = ({
  children = null,
  ...restProps
}) => {
  const chart = useChart();
  const colorAxisRef = (0, import_react22.useRef)(null);
  const providedColorAxisRef = (0, import_react22.useRef)(null);
  const [hasColorAxis, setHasColorAxis] = (0, import_react22.useState)(false);
  (0, import_react22.useEffect)(() => {
    const colorAxis = createColorAxis(chart, restProps);
    colorAxisRef.current = colorAxis;
    providedColorAxisRef.current = createProvidedColorAxis_default(colorAxisRef.current);
    setHasColorAxis(true);
    chart.needsRedraw();
    return () => {
      if (colorAxis && colorAxis.remove) {
        try {
          colorAxis.remove.bind(colorAxis)(false);
        } catch {
        }
        chart.needsRedraw();
      }
    };
  }, []);
  const modifiedProps = useModifiedProps(restProps);
  (0, import_react22.useEffect)(() => {
    if (colorAxisRef.current !== null && modifiedProps !== false) {
      const colorAxis = colorAxisRef.current;
      colorAxis.update(modifiedProps, false);
      chart.needsRedraw();
    }
  });
  if (!hasColorAxis) return null;
  return (0, import_jsx_runtime11.jsx)(ColorAxisContext_default.Provider, {
    value: providedColorAxisRef.current,
    children
  });
};
var getColorAxisConfig = (props) => {
  const {
    id = v4_default,
    ...rest
  } = props;
  const colorAxisId = typeof id === "function" ? id() : id;
  const nonEventProps = getNonEventHandlerProps(rest);
  const events = getEventsConfig(rest);
  return {
    id: colorAxisId,
    events,
    ...nonEventProps
  };
};
var createColorAxis = (chart, props) => {
  const opts = getColorAxisConfig(props);
  return chart.addColorAxis(opts, false);
};
var ColorAxis_default = ColorAxis;

// node_modules/react-jsx-highcharts/dist/es/components/ColorAxis/index.js
var ColorAxis_default2 = ColorAxis_default;

// node_modules/react-jsx-highcharts/dist/es/components/Credits/Credits.js
var Credits = ({
  enabled = true,
  ...restProps
}) => {
  UseChartUpdate_default({
    enabled,
    ...restProps
  }, updateCredits, (chart) => updateCredits(chart, {
    enabled: false
  }));
  return null;
};
var updateCredits = (chart, config) => {
  if ("text" in config && !config.text) delete config.text;
  chart.addCredits(config, true);
};
var Credits_default = Credits;

// node_modules/react-jsx-highcharts/dist/es/components/Credits/index.js
var Credits_default2 = Credits_default;

// node_modules/react-jsx-highcharts/dist/es/components/Loading/Loading.js
var import_react23 = __toESM(require_react());
var Loading = (0, import_react23.memo)(({
  children,
  isLoading = true,
  ...restProps
}) => {
  const chart = useChart();
  const modifiedProps = useModifiedProps(restProps);
  (0, import_react23.useEffect)(() => {
    if (modifiedProps !== false) {
      updateLoading(modifiedProps, chart);
    }
    isLoading ? chart.showLoading(children) : chart.hideLoading();
  });
  (0, import_react23.useEffect)(() => {
    return () => {
      try {
        chart.hideLoading();
      } catch {
      }
    };
  }, []);
  return null;
});
var updateLoading = (config, chart) => {
  chart.update({
    loading: config
  }, true);
};
Loading.displayName = "Loading";
var Loading_default = Loading;

// node_modules/react-jsx-highcharts/dist/es/components/Loading/index.js
var Loading_default2 = Loading_default;

// node_modules/react-jsx-highcharts/dist/es/components/Legend/Legend.js
var import_react24 = __toESM(require_react());
var Legend = (0, import_react24.memo)(({
  children = null,
  enabled = true,
  ...restProps
}) => {
  UseChartUpdate_default({
    enabled,
    ...restProps
  }, updateLegend, (chart) => updateLegend(chart, {
    enabled: false
  }), false);
  return children;
});
var updateLegend = (chart, config) => {
  chart.update({
    legend: config
  }, false);
};
Legend.displayName = "Legend";
var Legend_default = Legend;

// node_modules/react-jsx-highcharts/dist/es/components/Legend/LegendTitle.js
var import_react25 = __toESM(require_react());
var LegendTitle = (0, import_react25.memo)((props) => {
  UseChartUpdate_default(props, updateLegendTitle, (chart) => updateLegendTitle(chart, {
    text: null
  }));
  return null;
});
var updateLegendTitle = (chart, config) => {
  chart.update({
    legend: {
      title: config
    }
  }, false);
};
LegendTitle.displayName = "LegendTitle";
var LegendTitle_default = LegendTitle;

// node_modules/react-jsx-highcharts/dist/es/components/Legend/index.js
var ChartLegend = Legend_default;
ChartLegend.Title = LegendTitle_default;
var Legend_default2 = ChartLegend;

// node_modules/react-jsx-highcharts/dist/es/components/Pane/Pane.js
var import_react26 = __toESM(require_react());
var Pane = (0, import_react26.memo)(({
  children,
  ...restProps
}) => {
  UseChartUpdate_default(restProps, updatePane, (chart) => updatePane(chart, {}), false);
  return null;
});
var updatePane = (chart, config) => {
  chart.update({
    pane: config
  }, false);
};
Pane.displayName = "Pane";
var Pane_default = Pane;

// node_modules/react-jsx-highcharts/dist/es/components/Pane/index.js
var Pane_default2 = Pane_default;

// node_modules/react-jsx-highcharts/dist/es/components/PlotBandLine/PlotBand.js
var React12 = __toESM(require_react());
var import_react29 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/PlotBandLineContext/index.js
var import_react27 = __toESM(require_react());
var PlotBandLineContext = (0, import_react27.createContext)();
PlotBandLineContext.displayName = "PlotBandLineContext";
var PlotBandLineContext_default = PlotBandLineContext;

// node_modules/react-jsx-highcharts/dist/es/components/PlotBandLine/UsePlotBandLineLifecycle.js
var import_react28 = __toESM(require_react());
function usePlotBandLineLifecycle(props, plotType) {
  const {
    id = v4_default,
    axisId,
    children,
    ...rest
  } = props;
  const axis = useAxis(axisId);
  const idRef = (0, import_react28.useRef)();
  const [plotbandline, setPlotbandline] = (0, import_react28.useState)(null);
  const modifiedProps = useModifiedProps(rest);
  (0, import_react28.useEffect)(() => {
    if (!axis) return;
    if (!plotbandline || modifiedProps !== false) {
      if (!plotbandline) {
        idRef.current = typeof id === "function" ? id() : id;
      }
      const myId = idRef.current;
      const opts = {
        id: myId,
        ...rest
      };
      if (plotbandline) axis.removePlotBandOrLine(idRef.current);
      axis.addPlotBandOrLine(opts, plotType);
      setPlotbandline({
        id: myId,
        get object() {
          if (axis && axis.object && axis.object.plotLinesAndBands) {
            return axis.object.plotLinesAndBands.find((plb) => plb.id === myId);
          }
          return null;
        }
      });
    }
  });
  (0, import_react28.useEffect)(() => {
    return () => {
      try {
        axis.removePlotBandOrLine(idRef.current);
      } catch {
      }
    };
  }, []);
  return plotbandline;
}

// node_modules/react-jsx-highcharts/dist/es/components/PlotBandLine/PlotBand.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var PlotBand = (0, import_react29.memo)((props) => {
  const plotband = usePlotBandLineLifecycle(props, "plotBands");
  const {
    children
  } = props;
  if (!children && !plotband) return null;
  return (0, import_jsx_runtime12.jsx)(PlotBandLineContext_default.Provider, {
    value: plotband,
    children
  });
});
PlotBand.displayName = "PlotBand";
var PlotBand_default = PlotBand;

// node_modules/react-jsx-highcharts/dist/es/components/PlotBandLine/PlotLine.js
var React13 = __toESM(require_react());
var import_react30 = __toESM(require_react());
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var PlotLine = (0, import_react30.memo)((props) => {
  const plotline = usePlotBandLineLifecycle(props, "plotLines");
  const {
    children
  } = props;
  if (!children && !plotline) return null;
  return (0, import_jsx_runtime13.jsx)(PlotBandLineContext_default.Provider, {
    value: plotline,
    children
  });
});
PlotLine.displayName = "PlotLine";
var PlotLine_default = PlotLine;

// node_modules/react-jsx-highcharts/dist/es/components/PlotBandLine/PlotBandLineLabel.js
var import_react32 = __toESM(require_react());

// node_modules/react-jsx-highcharts/dist/es/components/UsePlotBandLine/index.js
var import_react31 = __toESM(require_react());
function usePlotBandLine() {
  return (0, import_react31.useContext)(PlotBandLineContext_default);
}

// node_modules/react-jsx-highcharts/dist/es/components/PlotBandLine/PlotBandLineLabel.js
var PlotBandLineLabel = (0, import_react32.memo)((props) => {
  const providedPlotbandline = usePlotBandLine();
  (0, import_react32.useEffect)(() => {
    if (!providedPlotbandline) return;
    const {
      children: text,
      id,
      ...rest
    } = props;
    updatePlotBandLineLabel(providedPlotbandline.object, {
      text,
      ...rest
    });
  });
  (0, import_react32.useEffect)(() => {
    return () => {
      if (!providedPlotbandline) return;
      try {
        updatePlotBandLineLabel(providedPlotbandline.object, {
          text: null
        });
      } catch {
      }
    };
  }, []);
  return null;
});
var updatePlotBandLineLabel = (plotbandline, config) => {
  if (plotbandline) {
    plotbandline.options.label = getLabelProps(config);
    plotbandline.render();
  }
};
var getLabelProps = (props) => {
  const {
    text,
    formatter,
    align,
    rotation,
    style,
    textAlign,
    useHTML,
    verticalAlign,
    x,
    y
  } = props;
  return {
    text,
    formatter,
    align,
    rotation,
    style,
    textAlign,
    useHTML,
    verticalAlign,
    x,
    y
  };
};
PlotBandLineLabel.displayName = "PlotBandLineLabel";
var PlotBandLineLabel_default = PlotBandLineLabel;

// node_modules/react-jsx-highcharts/dist/es/components/PlotBandLine/index.js
var ChartPlotBand = PlotBand_default;
ChartPlotBand.Label = PlotBandLineLabel_default;
var ChartPlotLine = PlotLine_default;
ChartPlotLine.Label = PlotBandLineLabel_default;

// node_modules/react-jsx-highcharts/dist/es/components/Subtitle/Subtitle.js
var import_react33 = __toESM(require_react());
var Subtitle = (0, import_react33.memo)((props) => {
  UseChartUpdate_default(props, updateSubtitle, (chart) => updateSubtitle(chart, {
    text: null
  }));
  return null;
});
var updateSubtitle = (chart, config) => {
  chart.setTitle(void 0, config, false);
};
Subtitle.displayName = "Subtitle";
var Subtitle_default = Subtitle;

// node_modules/react-jsx-highcharts/dist/es/components/Subtitle/index.js
var Subtitle_default2 = Subtitle_default;

// node_modules/react-jsx-highcharts/dist/es/components/Title/Title.js
var import_react34 = __toESM(require_react());
var Title = (0, import_react34.memo)((props) => {
  UseChartUpdate_default(props, updateTitle, (chart) => updateTitle(chart, {
    text: null
  }));
  return null;
});
var updateTitle = (chart, config) => {
  chart.setTitle(config, null, false);
};
Title.displayName = "Title";
var Title_default = Title;

// node_modules/react-jsx-highcharts/dist/es/components/Title/index.js
var Title_default2 = Title_default;

// node_modules/react-jsx-highcharts/dist/es/components/Tooltip/Tooltip.js
var import_react35 = __toESM(require_react());
var Tooltip = (0, import_react35.memo)((props) => {
  var _props$enabled;
  const {
    children = null,
    ...restProps
  } = props;
  const chart = useChart();
  const Highcharts = useHighcharts();
  restProps.enabled = (_props$enabled = props.enabled) !== null && _props$enabled !== void 0 ? _props$enabled : true;
  (0, import_react35.useEffect)(() => {
    updateTooltip(chart, {
      ...Highcharts.defaultOptions && Highcharts.defaultOptions.tooltip,
      ...restProps
    });
    return () => {
      try {
        updateTooltip(chart, {
          enabled: false
        });
      } catch {
      }
    };
  }, []);
  const modifiedProps = useModifiedProps(restProps);
  (0, import_react35.useEffect)(() => {
    if (modifiedProps !== false) {
      updateTooltip(chart, modifiedProps);
    }
  });
  return null;
});
var updateTooltip = (chart, config) => {
  chart.update({
    tooltip: config
  });
};
Tooltip.displayName = "Tooltip";
var Tooltip_default = Tooltip;

// node_modules/react-jsx-highcharts/dist/es/components/Tooltip/index.js
var Tooltip_default2 = Tooltip_default;

// node_modules/react-jsx-highcharts/dist/es/components/ZAxis/ZAxis.js
var React14 = __toESM(require_react());
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var ZAxis = ({
  type = "linear",
  ...restProps
}) => (0, import_jsx_runtime14.jsx)(Axis_default2, {
  type,
  ...restProps,
  id: "zAxis",
  isX: false,
  dynamicAxis: false
});
ZAxis.displayName = "ZAxis";
ZAxis.Title = Axis_default2.Title;
var ZAxis_default = ZAxis;

// node_modules/react-jsx-highcharts/dist/es/components/ZAxis/index.js
var ZAxis_default2 = ZAxis_default;

// node_modules/react-jsx-highcharts/dist/es/components/BarSeries/BarSeries.js
var React15 = __toESM(require_react());
var import_react36 = __toESM(require_react());
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var BarSeries = (props) => {
  const chart = useChart();
  (0, import_react36.useEffect)(() => {
    chart.update({
      chart: {
        inverted: true
      }
    });
  }, []);
  return (0, import_jsx_runtime15.jsx)(Series_default2, {
    ...props,
    type: "bar"
  });
};
var BarSeries_default = BarSeries;

// node_modules/react-jsx-highcharts/dist/es/components/BarSeries/index.js
var BarSeries_default2 = BarSeries_default;

// node_modules/react-jsx-highcharts/dist/es/components/UseSeries/index.js
var import_react37 = __toESM(require_react());
function useSeries(seriesId) {
  const contextSeries = (0, import_react37.useContext)(SeriesContext_default);
  const chart = useChart();
  const createStateSeries = () => {
    if (contextSeries) return contextSeries;
    if (seriesId) {
      const mySeries = chart.get(seriesId);
      return createProvidedSeries(mySeries);
    }
    return null;
  };
  const [providedSeries, setProvidedSeries] = (0, import_react37.useState)(createStateSeries);
  (0, import_react37.useEffect)(() => {
    if (providedSeries) return;
    setProvidedSeries(createStateSeries());
  }, []);
  (0, import_react37.useDebugValue)(providedSeries ? providedSeries.id : null);
  return providedSeries;
}

// node_modules/react-jsx-highcharts/dist/es/components/Debug/Debug.js
var import_react38 = __toESM(require_react());
var Debug = ({
  varName = "chart"
}) => {
  const chart = useChart();
  (0, import_react38.useEffect)(() => {
    window[varName] = chart.object;
    console.log(`Chart instance available as global variable as window.${varName}`);
    return () => {
      window[varName] = void 0;
    };
  }, [varName]);
  return null;
};
var Debug_default = Debug;

// node_modules/react-jsx-highcharts/dist/es/components/Debug/index.js
var Debug_default2 = Debug_default;

// node_modules/react-jsx-highcharts/dist/es/index.js
var axisNotRequired = {
  requiresAxis: false
};
var AreaRangeSeries = withSeriesType("AreaRange");
var AreaSeries = withSeriesType("Area");
var AreaSplineRangeSeries = withSeriesType("AreaSplineRange");
var AreaSplineSeries = withSeriesType("AreaSpline");
var BellCurveSeries = withSeriesType("BellCurve", {});
var BoxPlotSeries = withSeriesType("BoxPlot");
var BubbleSeries = withSeriesType("Bubble");
var BulletSeries = withSeriesType("Bullet");
var ColumnPyramidSeries = withSeriesType("ColumnPyramid");
var ColumnRangeSeries = withSeriesType("ColumnRange");
var ColumnSeries = withSeriesType("Column");
var CylinderSeries = withSeriesType("Cylinder");
var DependencyWheelSeries = withSeriesType("DependencyWheel");
var ErrorBarSeries = withSeriesType("ErrorBar");
var FunnelSeries = withSeriesType("Funnel", axisNotRequired);
var Funnel3dSeries = withSeriesType("Funnel3d");
var GaugeSeries = withSeriesType("Gauge");
var HeatmapSeries = withSeriesType("Heatmap");
var HistogramSeries = withSeriesType("Histogram", {});
var ItemSeries = withSeriesType("Item");
var LineSeries = withSeriesType("Line");
var NetworkGraphSeries = withSeriesType("NetworkGraph");
var PackedBubbleSeries = withSeriesType("PackedBubble", axisNotRequired);
var ParetoSeries = withSeriesType("Pareto", {});
var PieSeries = withSeriesType("Pie", axisNotRequired);
var PolygonSeries = withSeriesType("Polygon");
var PyramidSeries = withSeriesType("Pyramid", axisNotRequired);
var Pyramid3dSeries = withSeriesType("Pyramid3d");
var SankeySeries = withSeriesType("Sankey");
var OrganizationSeries = withSeriesType("Organization");
var ScatterSeries = withSeriesType("Scatter");
var Scatter3dSeries = withSeriesType("Scatter3d");
var SolidGaugeSeries = withSeriesType("SolidGauge");
var SplineSeries = withSeriesType("Spline");
var StreamGraphSeries = withSeriesType("StreamGraph");
var SunburstSeries = withSeriesType("Sunburst");
var TilemapSeries = withSeriesType("Tilemap");
var TimelineSeries = withSeriesType("Timeline");
var TreemapSeries = withSeriesType("Treemap");
var VariablePieSeries = withSeriesType("VariablePie", axisNotRequired);
var VariwideSeries = withSeriesType("Variwide");
var VennSeries = withSeriesType("Venn", axisNotRequired);
var VectorSeries = withSeriesType("Vector");
var WaterfallSeries = withSeriesType("Waterfall");
var WindBarbSeries = withSeriesType("WindBarb");
var XRangeSeries = withSeriesType("XRange");
export {
  Annotation_default2 as Annotation,
  AreaRangeSeries,
  AreaSeries,
  AreaSplineRangeSeries,
  AreaSplineSeries,
  Axis_default2 as Axis,
  BarSeries_default2 as BarSeries,
  BaseChart_default2 as BaseChart,
  BellCurveSeries,
  BoxPlotSeries,
  BubbleSeries,
  BulletSeries,
  Caption_default2 as Caption,
  Chart_default2 as Chart,
  ColorAxis_default2 as ColorAxis,
  ColumnPyramidSeries,
  ColumnRangeSeries,
  ColumnSeries,
  Credits_default2 as Credits,
  CylinderSeries,
  Debug_default2 as Debug,
  DependencyWheelSeries,
  ErrorBarSeries,
  Funnel3dSeries,
  FunnelSeries,
  GaugeSeries,
  HeatmapSeries,
  Highcharts3dChart_default2 as Highcharts3dChart,
  HighchartsChart_default2 as HighchartsChart,
  HighchartsProvider,
  HighchartsSparkline_default2 as HighchartsSparkline,
  HistogramSeries,
  ItemSeries,
  Legend_default2 as Legend,
  LineSeries,
  Loading_default2 as Loading,
  NetworkGraphSeries,
  OrganizationSeries,
  PackedBubbleSeries,
  Pane_default2 as Pane,
  ParetoSeries,
  PieSeries,
  ChartPlotBand as PlotBand,
  ChartPlotLine as PlotLine,
  PolygonSeries,
  Pyramid3dSeries,
  PyramidSeries,
  SankeySeries,
  Scatter3dSeries,
  ScatterSeries,
  Series_default2 as Series,
  SolidGaugeSeries,
  SplineSeries,
  StreamGraphSeries,
  Subtitle_default2 as Subtitle,
  SunburstSeries,
  TilemapSeries,
  TimelineSeries,
  Title_default2 as Title,
  Tooltip_default2 as Tooltip,
  TreemapSeries,
  VariablePieSeries,
  VariwideSeries,
  VectorSeries,
  VennSeries,
  WaterfallSeries,
  WindBarbSeries,
  XAxis_default2 as XAxis,
  XRangeSeries,
  YAxis_default2 as YAxis,
  ZAxis_default2 as ZAxis,
  getEventsConfig,
  getNonEventHandlerProps,
  useAxis,
  useChart,
  useHighcharts,
  useModifiedProps,
  usePlotBandLine,
  useSeries,
  withHighcharts,
  withSeriesType
};
//# sourceMappingURL=react-jsx-highcharts.js.map
